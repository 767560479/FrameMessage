{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/reaction.ts","../src/responsable.ts","../src/server.ts","../src/client.ts"],"sourcesContent":["import { MessageType } from \"./types\";\n\nexport const WILDCARD = \"*\"; // 通配符\nexport const HAND_SHAKE = \"__FRAME_MESSAGE_HANDLE_SHAKE__\"; // 内置握手通信类型\n\n// 是否内置通信类型\nexport const isInternalType = (type: MessageType): boolean => {\n  return [HAND_SHAKE].includes(type);\n};\n\n// 判断是否是window 原生函数\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const isNative = (fn: Function): boolean => {\n  return /\\[native code\\]/.test(fn.toString());\n};\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noop = () => {};\n\nexport const warn = (...log: any[]) => {\n  const print = console.warn ?? console.log;\n  print(...log);\n};\n\n// 生成id\nexport const generateUid = (): string => {\n  return Number(Math.floor(Math.random() * 1000000) + Date.now()).toString(36);\n};\n\n// 延迟\nexport const delay = (timeout: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, timeout));\n};\n\n// 数组过滤\nexport const filter = <T>(arr: T[], match: (item: T) => boolean) => {\n  const result: T[] = [];\n  return arr.reduce((result, item) => {\n    if (match(item)) result.push(item);\n    return result;\n  }, result);\n};\n","import { TaskId } from \"./types\";\nimport { generateUid } from \"./utils\";\n\nexport enum STATUS {\n  success = \"success\",\n  failure = \"failure\",\n}\n\nenum REACTION_TYPE {\n  request = \"reaction_request\",\n  response = \"reaction_response\",\n}\n\nabstract class Reaction {\n  protected constructor(\n    public _reactType: REACTION_TYPE,\n    public _id: TaskId = generateUid(),\n    public type: string,\n    public data: any = null\n  ) {\n    this._id = _id;\n    this.type = type;\n    this.data = data;\n    this._reactType = _reactType;\n  }\n}\n\ninterface RequestOption {\n  type?: string;\n  data?: any;\n  id?: string;\n}\n\n// 响应请求\nexport class Request extends Reaction {\n  constructor({ type, id, data }: RequestOption) {\n    super(REACTION_TYPE.request, id, type as string, data);\n  }\n\n  // 是否请求实例\n  static isRequest(req: any) {\n    return req._reactType === REACTION_TYPE.request;\n  }\n}\n\ninterface ResponseOptions extends RequestOption {\n  status?: STATUS;\n}\n\n// 响应返回\nexport class Response extends Reaction {\n  status: STATUS;\n  constructor({ type, id, data, status }: ResponseOptions) {\n    super(REACTION_TYPE.response, id, type as string, data);\n    this.status = status ?? STATUS.success;\n  }\n\n  static isResponse(res: any) {\n    return res._reactType === REACTION_TYPE.response;\n  }\n}\n\n// client响应任务\nexport class Task {\n  constructor(\n    public req: Request,\n    public res: Response | null,\n    public resolve: (res: Response) => void,\n    public reject: (reason: any) => void\n  ) {\n    this.req = req;\n    this.res = res;\n    this.resolve = resolve;\n    this.reject = reject;\n  }\n}\n","import { Request, Response, STATUS } from \"./reaction\";\nimport { warn } from \"./utils\";\n\n// Server端响应\nexport default class Responsable {\n  anwsered: boolean;\n  constructor(private readonly _request: Request, public event: MessageEvent) {\n    this._request = _request;\n    this.event = event;\n    this.anwsered = false;\n  }\n\n  /**\n   * 操作成功响应客户端消息\n   * @param data 相应数据\n   */\n  public success(data: any) {\n    if (this.anwsered) return warn(\"this request has been anwsered\");\n\n    if (this.event.source) {\n      const { type, _id } = this._request;\n      const res = new Response({ type, data, status: STATUS.success, id: _id });\n      debugger;\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.event.source.postMessage(res, \"*\");\n      this.anwsered = true;\n    }\n  }\n\n  /**\n   * 操作失败响应客户端消息\n   * @param data 相应数据\n   */\n  public error(data: any) {\n    if (this.anwsered) return warn(\"this request has been anwsered\");\n\n    if (this.event.source) {\n      const { type, _id } = this._request;\n      const res = new Response({ type, data, status: STATUS.failure, id: _id });\n      debugger;\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.event.source.postMessage(res, \"*\");\n      this.anwsered = true;\n    }\n  }\n}\n","import { Self, MessageType, MessageListener, Next } from \"./types\";\nimport { noop, isNative, WILDCARD, filter, HAND_SHAKE } from \"./utils\";\nimport { Request } from \"./reaction\";\nimport Responsable from \"./responsable\";\n\nenum STATE {\n  open,\n  closed,\n}\ntype HandlerFn = (req: Request, res: Responsable, next: Next) => Promise<any>;\ntype ErrorHandler = (err: any, req: Request, res: Responsable) => void; // 错误处理\ntype NotFoundErrorHandler = (req: Request, res: Responsable) => void; // 404 处理\ninterface ServerOption {\n  self?: Self;\n  errorHandler?: ErrorHandler;\n}\n\n// 执行函数\nclass Handler {\n  public type: MessageType;\n  public fn: HandlerFn;\n  constructor(type: MessageType, fn: HandlerFn) {\n    this.type = type;\n    this.fn = fn;\n  }\n}\n\n// 默认失败执行函数\nconst defaultErrorHandler: ErrorHandler = (err, _req, res) => {\n  if (!res.anwsered) {\n    res.error(err);\n  }\n};\n\n// 404 失败执行函数\nconst notFoundErrorHandler: NotFoundErrorHandler = (req, res) => {\n  res.error(`the type of ${req.data.type} has not been found`);\n};\n\nexport default class Server {\n  self: Self;\n  handlers: Handler[];\n  state: STATE;\n  errorHandler: ErrorHandler;\n  private notFoundErrorHandler: NotFoundErrorHandler;\n  private _msgListener: MessageListener;\n\n  constructor(option: ServerOption = {}) {\n    this.self = option.self ?? self;\n    this.handlers = []; // 执行函数集合\n    this.state = STATE.closed;\n    this._msgListener = noop;\n    this.errorHandler = option.errorHandler ?? defaultErrorHandler;\n    this.notFoundErrorHandler = notFoundErrorHandler;\n\n    if (!isNative(this.self.postMessage)) {\n      throw new TypeError(\n        \"`self` parameter must contain native `postMessage` method\"\n      );\n    }\n\n    this.open();\n    this._listenInternalType()\n  }\n\n  // 开启Server端监听\n  open() {\n    if (this.state !== STATE.closed) return;\n    this._msgListener = this._receiver.bind(this);\n    this.self.addEventListener(\"message\", this._msgListener);\n    this.state = STATE.open;\n  }\n\n  // 关闭Server端监听\n  close() {\n    if (this.state === STATE.closed) return;\n    this.self.removeEventListener(\"message\", this._msgListener);\n    this._msgListener = noop;\n    this.state = STATE.closed;\n  }\n\n  /** 注册监听事件\n   * @param {MessageType | HandlerFn} type\n   * @param {HandlerFn} handler\n   */\n  public listen(type: MessageType, handler?: HandlerFn) {\n    if (handler) {\n      this.handlers.push(new Handler(type, handler));\n    } else if (typeof type === \"function\") {\n      this.handlers.push(new Handler(WILDCARD, type));\n    }\n  }\n\n  /**\n   * 取消事件监听\n   * @param {MessageType} type 事件类型\n   * @param {HandlerFn} handler? 处理器\n   */\n  public cancel(type: MessageType, handler: HandlerFn) {\n    if (typeof type === \"function\") {\n      handler = type;\n      type = WILDCARD;\n    }\n    if (type) {\n      this.handlers = handler\n        ? filter(this.handlers, (item) => item.fn !== handler)\n        : filter(this.handlers, (item) => item.type !== type);\n    }\n  }\n\n  /** 接收事件信息并处理\n   * @param {MessageEvent} event\n   */\n  private async _receiver(event: MessageEvent) {\n    // eslint-disable-next-line no-debugger\n    debugger;\n    const { type, data, _id } = event.data;\n    const req = new Request({ type, data, id: _id });\n    const res = new Responsable(req, event);\n\n    const handlers = filter(this.handlers, (item) => item.type === type);\n\n    let index = 0;\n    const next = async () => {\n      const handler = handlers[index++];\n      if (handler) {\n        try {\n          await handler.fn(req, res, next); // 执行完毕需要可以返回数据\n        } catch (err) {\n          this.errorHandler(err, req, res);\n        }\n      } else {\n        this.notFoundErrorHandler(req, res);\n      }\n    };\n\n    await next();\n  }\n\n  // 监听内部事件\n  private _listenInternalType() {\n    this.listen(HAND_SHAKE, async (_req, res) => {\n      res.success(null);\n    });\n  }\n}\n","/* eslint-disable no-debugger */\nimport { Self, MessageType, MessageListener, TasksMap, TaskId } from \"./types\";\nimport { isNative, warn, noop, delay, HAND_SHAKE } from \"./utils\";\nimport { Request, Response, Task, STATUS } from \"./reaction\";\n\ntype ClientOption = {\n  self?: Self;\n  timeout?: number;\n};\n\n// 客户端链接状态\nenum STATE {\n  notConnected,\n  connecting,\n  connected,\n  closed,\n}\n\nexport default class Client {\n  target: Self;\n  origin: string;\n  self: Self;\n  timeout: number;\n  tasks: TasksMap<string, Task>;\n  state: STATE;\n  private _msgListener: MessageListener;\n  private _connector: null | Promise<any>;\n\n  constructor(target: Self, origin = \"*\", option: ClientOption = {}) {\n    this.target = target;\n    this.origin = origin;\n    this.timeout = option.timeout ?? 5000;\n    this.self = option.self ?? self;\n    this.state = STATE.closed;\n    this.tasks = Object.create(null);\n    this._msgListener = noop;\n    this._connector = null;\n\n    // target 必须是带有原生window.postmessage方法\n    if (!isNative(target.postMessage)) {\n      throw new TypeError(\n        \"The first parameter must contain native `postMessage` method\"\n      );\n    }\n\n    this.open();\n  }\n\n  // 开启Client端监听\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  open() {\n    if (this.state !== STATE.closed) return;\n    this.state = STATE.notConnected;\n    this._msgListener = this._receiver.bind(this);\n    this.self.addEventListener(\"message\", this._msgListener);\n  }\n\n  // 关闭Client端监听\n  close() {\n    if (this.state === STATE.closed) return;\n    this.self.removeEventListener(\"message\", this._msgListener);\n    this._msgListener = noop;\n    this.state = STATE.closed;\n  }\n\n  /**  连接服务端\n   * * @return Promise 连接是否成功\n   */\n  async connect(): Promise<any> {\n    if (this.state === STATE.closed) {\n      return Promise.reject(\"The client is closed and needs to be reopened\");\n    }\n\n    if (this.state === STATE.notConnected) {\n      this._connector = new Promise((resolve, reject) => {\n        const onConnected = () => {\n          this.state = STATE.connected;\n          resolve();\n        };\n\n        const onError = (error: any) => {\n          this.state = STATE.notConnected;\n          reject(error);\n        };\n\n        const request = new Request({ type: HAND_SHAKE });\n        return this._requestRetry(request).then(onConnected, onError); // 创建连接结果\n      });\n    }\n    return this._connector;\n  }\n\n  /**触发监听，发布postmessage 事件\n   * @param {MessageType} type\n   * @param {any} data\n   * @param {string} origin\n   * @returns {Promise}  Promise 响应结果\n   */\n  async request(type: MessageType, data: any, origin?: string): Promise<any> {\n    debugger;\n    if (this.state === STATE.closed) {\n      return Promise.reject(\"The client is closed and needs to be reopened\");\n    }\n\n    if (typeof type !== \"string\") {\n      throw new TypeError(\"type must be a string\");\n    }\n\n    if (this.state === STATE.notConnected) {\n      await this.connect();\n    }\n\n    if (this.state === STATE.connecting) {\n      await this._connector;\n    }\n\n    const req = new Request({ type, data });\n    return this._request(req, this.timeout, origin ?? this.origin);\n  }\n\n  /**\n   * 移除任务\n   * @param id\n   */\n  removeTask(id: TaskId) {\n    Reflect.deleteProperty(this.tasks, id);\n  }\n\n  /** 处理request请求\n   * @param {Request} req\n   * @param {number} timeout\n   * @param {string} origin\n   */\n  private _request(req: Request, timeout = this.timeout, origin = this.origin) {\n    if (!Request.isRequest(req)) {\n      warn(\"The return value of requestInterceptor must be a valid request\");\n      return Promise.reject(req);\n    }\n    return new Promise((resolve, reject) => {\n      // 设置超时返回\n      const timer = setTimeout(() => {\n        reject(\"timeout\");\n      }, timeout);\n\n      // 请求结束删除任务\n      const cleanup = () => {\n        clearTimeout(timer);\n        this.removeTask(req._id);\n      };\n\n      const fulfilled = (res: Response) => {\n        resolve(res);\n        cleanup();\n      };\n\n      const rejected = (reason: any) => {\n        reject(reason);\n        cleanup();\n      };\n\n      this.target.postMessage(req, origin);\n      this.tasks[req._id] = new Task(req, null, fulfilled, rejected);\n    });\n  }\n\n  /**接收来自server的响应\n   * @param {MessageEvent} event\n   * */\n  private _receiver(event: MessageEvent) {\n    debugger;\n    if (!Response.isResponse(event.data)) return;\n    const { _id } = event.data;\n    const task = this.tasks[_id];\n    if (!task) return;\n\n    const res = new Response(event.data); // 根据接收信息生成一个响应对象\n    task.res = res;\n    if (res.status === STATUS.success) {\n      task.resolve(res);\n    } else {\n      task.reject(res);\n    }\n  }\n\n  /**\n   * 请求重试\n   * @param {Request} req 请求体\n   * @param {number} timeout 超时时间\n   * @param {number} count 重试次数\n   * @param {number} interval 重试间隔\n   * @return {Promise}  响应结果\n   */\n  private async _requestRetry(\n    req: Request,\n    timeout = 1000,\n    count = 3,\n    interval = 500\n  ) {\n    for (let i = 0; i < count; i++) {\n      // 设置延迟间隔时间\n      const time = i * interval;\n      if (time > 0) await delay(time);\n\n      try {\n        return await this._request(req, timeout);\n      } catch (e) {\n        // 重试完毕后取最后一次错误信息\n        if (i === count - 1) {\n          return Promise.reject(e);\n        }\n      }\n    }\n  }\n}\n"],"names":["STATE"],"mappings":"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"}