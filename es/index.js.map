{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/reaction.ts","../src/responsable.ts","../src/server.ts","../src/client.ts"],"sourcesContent":["import { MessageType } from \"./types\";\n\nexport const WILDCARD = \"*\"; // 通配符\nexport const HAND_SHAKE = \"__FRAME_MESSAGE_HANDLE_SHAKE__\"; // 内置握手通信类型\n\n// 是否内置通信类型\nexport const isInternalType = (type: MessageType): boolean => {\n  return [HAND_SHAKE].includes(type);\n};\n\n// 判断是否是window 原生函数\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const isNative = (fn: Function): boolean => {\n  return /\\[native code\\]/.test(fn.toString());\n};\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noop = () => {};\n\nexport const warn = (...log: any[]) => {\n  const print = console.warn ?? console.log;\n  print(...log);\n};\n\n// 生成id\nexport const generateUid = (): string => {\n  return Number(Math.floor(Math.random() * 1000000) + Date.now()).toString(36);\n};\n\n// 延迟\nexport const delay = (timeout: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, timeout));\n};\n\n// 数组过滤\nexport const filter = <T>(arr: T[], match: (item: T) => boolean) => {\n  const result: T[] = [];\n  return arr.reduce((result, item) => {\n    if (match(item)) result.push(item);\n    return result;\n  }, result);\n};\n","import { TaskId } from \"./types\";\nimport { generateUid } from \"./utils\";\n\n\nenum REACTION_TYPE {\n  request = \"reaction_request\",\n  response = \"reaction_response\",\n}\n\nabstract class Reaction {\n  protected constructor(\n    public _reactType: REACTION_TYPE,\n    public _id: TaskId = generateUid(),\n    public type: string,\n    public data: any = null\n  ) {\n    this._id = _id;\n    this.type = type;\n    this.data = data;\n    this._reactType = _reactType;\n  }\n}\n\ninterface RequestOption {\n  type?: string;\n  data?: any;\n  id?: string;\n}\n\n// 响应请求\nexport class Request extends Reaction {\n  constructor({ type, id, data }: RequestOption) {\n    super(REACTION_TYPE.request, id, type as string, data);\n  }\n\n  // 是否请求实例\n  static isRequest(req: any) {\n    return req._reactType === REACTION_TYPE.request;\n  }\n}\n\ninterface ResponseOptions extends RequestOption {\n  error?: boolean;\n}\n\n// 响应返回\nexport class Response extends Reaction {\n  error: boolean;\n  constructor({ type, id, data, error }: ResponseOptions) {\n    super(REACTION_TYPE.response, id, type as string, data);\n    this.error = error ?? false;\n  }\n\n  static isResponse(res: any) {\n    return res._reactType === REACTION_TYPE.response;\n  }\n}\n\n// client响应任务\nexport class Task {\n  constructor(\n    public req: Request,\n    public res: Response | null,\n    public resolve: (res: Response) => void,\n    public reject: (reason: any) => void\n  ) {\n    this.req = req;\n    this.res = res;\n    this.resolve = resolve;\n    this.reject = reject;\n  }\n}\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { Request, Response } from \"./reaction\";\nimport { warn } from \"./utils\";\n\n// Server端响应\nexport default class Responsable {\n  anwsered: boolean;\n  constructor(private readonly _request: Request, public event: MessageEvent) {\n    this._request = _request;\n    this.event = event;\n    this.anwsered = false;\n  }\n\n  /**\n   * 操作成功响应客户端消息\n   * @param data 相应数据\n   */\n  public success(data: any) {\n    debugger;\n    if (this.anwsered) {\n      return warn(\"this request has been anwsered\");\n    }\n\n    if (this.event.source) {\n      const { type, _id } = this._request;\n      const res = new Response({ type, data, id: _id });\n      debugger;\n      // @ts-ignore\n      this.event.source.postMessage(res, \"*\");\n      this.anwsered = true;\n    }\n  }\n\n  /**\n   * 操作失败响应客户端消息\n   * @param data 相应数据\n   */\n  public error(data: any) {\n    if (this.anwsered) {\n      return warn(\"this request has been anwsered\");\n    }\n\n    if (this.event.source) {\n      const { type, _id } = this._request;\n      const res = new Response({ type, data, error: true, id: _id });\n      debugger;\n      // @ts-ignore\n      this.event.source.postMessage(res, \"*\");\n      this.anwsered = true;\n    }\n  }\n}\n","import { Self, MessageType, MessageListener, Next } from \"./types\";\nimport { noop, isNative, WILDCARD, filter, HAND_SHAKE } from \"./utils\";\nimport { Request } from \"./reaction\";\nimport Responsable from \"./responsable\";\n\nenum STATE {\n  open,\n  closed,\n}\ntype HandlerFn = (req: Request, res: Responsable, next: Next) => Promise<any>;\ntype ErrorHandler = (err: any, req: Request, res: Responsable) => void; // 错误处理\ntype NotFoundErrorHandler = (req: Request, res: Responsable) => void; // 404 处理\ninterface ServerOption {\n  self?: Self;\n  errorHandler?: ErrorHandler;\n}\n\n// 执行函数\nclass Handler {\n  public type: MessageType;\n  public fn: HandlerFn;\n  constructor(type: MessageType, fn: HandlerFn) {\n    this.type = type;\n    this.fn = fn;\n  }\n}\n\n// 默认失败执行函数\nconst defaultErrorHandler: ErrorHandler = (err, _req, res) => {\n  if (!res.anwsered) {\n    res.error(err);\n  }\n};\n\n// 404 失败执行函数\nconst notFoundErrorHandler: NotFoundErrorHandler = (req, res) => {\n  res.error(`the type of ${req.type} has not been found`);\n};\n\nexport default class Server {\n  self: Self;\n  handlers: Handler[];\n  state: STATE;\n  errorHandler: ErrorHandler;\n  private notFoundErrorHandler: NotFoundErrorHandler;\n  private _msgListener: MessageListener;\n\n  constructor(option: ServerOption = {}) {\n    this.self = option.self ?? self;\n    this.handlers = []; // 执行函数集合\n    this.state = STATE.closed;\n    this._msgListener = noop;\n    this.errorHandler = option.errorHandler ?? defaultErrorHandler;\n    this.notFoundErrorHandler = notFoundErrorHandler;\n\n    if (!isNative(this.self.postMessage)) {\n      throw new TypeError(\n        \"`self` parameter must contain native `postMessage` method\"\n      );\n    }\n\n    this.open();\n    this._listenInternalType();\n  }\n\n  // 开启Server端监听\n  open() {\n    if (this.state !== STATE.closed) return;\n    this._msgListener = this._receiver.bind(this);\n    this.self.addEventListener(\"message\", this._msgListener);\n    this.state = STATE.open;\n  }\n\n  // 关闭Server端监听\n  close() {\n    if (this.state === STATE.closed) return;\n    this.self.removeEventListener(\"message\", this._msgListener);\n    this._msgListener = noop;\n    this.state = STATE.closed;\n  }\n\n  /** 注册监听事件\n   * @param {MessageType | HandlerFn} type\n   * @param {HandlerFn} handler\n   */\n  public listen(type: MessageType, handler?: HandlerFn) {\n    if (handler) {\n      this.handlers.push(new Handler(type, handler));\n    } else if (typeof type === \"function\") {\n      this.handlers.push(new Handler(WILDCARD, type));\n    }\n  }\n\n  /**\n   * 取消事件监听\n   * @param {MessageType} type 事件类型\n   * @param {HandlerFn} handler? 处理器\n   */\n  public cancel(type: MessageType, handler: HandlerFn) {\n    if (typeof type === \"function\") {\n      handler = type;\n      type = WILDCARD;\n    }\n    if (type) {\n      this.handlers = handler\n        ? filter(this.handlers, (item) => item.fn !== handler)\n        : filter(this.handlers, (item) => item.type !== type);\n    }\n  }\n\n  /** 接收事件信息并处理\n   * @param {MessageEvent} event\n   */\n  private async _receiver(event: MessageEvent) {\n    // eslint-disable-next-line no-debugger\n    const { type, data, _id } = event.data;\n    if (type === \"webpackOk\") return;\n    const req = new Request({ type, data, id: _id });\n    const res = new Responsable(req, event);\n\n    const handlers = filter(this.handlers, (item) => item.type === type);\n\n    let index = 0;\n    const next = async () => {\n      const handler = handlers[index++];\n      if (handler) {\n        try {\n          await handler.fn(req, res, next); // 执行完毕需要可以返回数据\n        } catch (err) {\n          this.errorHandler(err, req, res);\n        }\n      } else {\n        this.notFoundErrorHandler(req, res);\n      }\n    };\n\n    await next();\n  }\n\n  // 监听内部事件\n  private _listenInternalType() {\n    this.listen(HAND_SHAKE, async (_req, res) => {\n      res.success(null);\n    });\n  }\n}\n","/* eslint-disable no-debugger */\nimport { Self, MessageType, MessageListener, TasksMap, TaskId } from \"./types\";\nimport { isNative, warn, noop, delay, HAND_SHAKE } from \"./utils\";\nimport { Request, Response, Task } from \"./reaction\";\n\ntype ClientOption = {\n  self?: Self;\n  timeout?: number;\n};\n\n// 客户端链接状态\nenum STATE {\n  notConnected,\n  connecting,\n  connected,\n  closed,\n}\n\nexport default class Client {\n  target: Self;\n  origin: string;\n  self: Self;\n  timeout: number;\n  tasks: TasksMap<string, Task>;\n  state: STATE;\n  private _msgListener: MessageListener;\n  private _connector: null | Promise<any>;\n\n  constructor(target: Self, origin = \"*\", option: ClientOption = {}) {\n    this.target = target;\n    this.origin = origin;\n    this.timeout = option.timeout ?? 5000;\n    this.self = option.self ?? self;\n    this.state = STATE.closed;\n    this.tasks = Object.create(null);\n    this._msgListener = noop;\n    this._connector = null;\n\n    // target 必须是带有原生window.postmessage方法\n    if (!isNative(target.postMessage)) {\n      throw new TypeError(\n        \"The first parameter must contain native `postMessage` method\"\n      );\n    }\n\n    this.open();\n  }\n\n  // 开启Client端监听\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  open() {\n    if (this.state !== STATE.closed) return;\n    this.state = STATE.notConnected;\n    this._msgListener = this._receiver.bind(this);\n    this.self.addEventListener(\"message\", this._msgListener);\n  }\n\n  // 关闭Client端监听\n  close() {\n    if (this.state === STATE.closed) return;\n    this.self.removeEventListener(\"message\", this._msgListener);\n    this._msgListener = noop;\n    this.state = STATE.closed;\n  }\n\n  /**  连接服务端\n   * * @return Promise 连接是否成功\n   */\n  async connect(): Promise<any> {\n    if (this.state === STATE.closed) {\n      return Promise.reject(\"The client is closed and needs to be reopened\");\n    }\n\n    if (this.state === STATE.notConnected) {\n      this._connector = new Promise((resolve, reject) => {\n        const onConnected = () => {\n          this.state = STATE.connected;\n          resolve();\n        };\n\n        const onError = (error: any) => {\n          this.state = STATE.notConnected;\n          reject(error);\n        };\n\n        const request = new Request({ type: HAND_SHAKE });\n        return this._requestRetry(request).then(onConnected, onError); // 创建连接结果\n      });\n    }\n    return this._connector;\n  }\n\n  /**触发监听，发布postmessage 事件\n   * @param {MessageType} type\n   * @param {any} data\n   * @param {string} origin\n   * @returns {Promise}  Promise 响应结果\n   */\n  async request(type: MessageType, data: any, origin?: string): Promise<any> {\n    debugger;\n    if (this.state === STATE.closed) {\n      return Promise.reject(\"The client is closed and needs to be reopened\");\n    }\n\n    if (typeof type !== \"string\") {\n      throw new TypeError(\"type must be a string\");\n    }\n\n    if (this.state === STATE.notConnected) {\n      await this.connect();\n    }\n\n    if (this.state === STATE.connecting) {\n      await this._connector;\n    }\n\n    const req = new Request({ type, data });\n    return this._request(req, this.timeout, origin ?? this.origin);\n  }\n\n  /**\n   * 移除任务\n   * @param id\n   */\n  removeTask(id: TaskId) {\n    Reflect.deleteProperty(this.tasks, id);\n  }\n\n  /** 处理request请求\n   * @param {Request} req\n   * @param {number} timeout\n   * @param {string} origin\n   */\n  private _request(req: Request, timeout = this.timeout, origin = this.origin) {\n    if (!Request.isRequest(req)) {\n      warn(\"The return value of requestInterceptor must be a valid request\");\n      return Promise.reject(req);\n    }\n    return new Promise((resolve, reject) => {\n      // 设置超时返回\n      const timer = setTimeout(() => {\n        reject(\"timeout\");\n      }, timeout);\n\n      // 请求结束删除任务\n      const cleanup = () => {\n        clearTimeout(timer);\n        this.removeTask(req._id);\n      };\n\n      const fulfilled = (res: Response) => {\n        resolve(res);\n        cleanup();\n      };\n\n      const rejected = (reason: any) => {\n        reject(reason);\n        cleanup();\n      };\n\n      this.target.postMessage(req, origin);\n      this.tasks[req._id] = new Task(req, null, fulfilled, rejected);\n    });\n  }\n\n  /**接收来自server的响应\n   * @param {MessageEvent} event\n   * */\n  private _receiver(event: MessageEvent) {\n\n    if (!Response.isResponse(event.data)) return;\n    const { _id } = event.data;\n    const task = this.tasks[_id];\n    if (!task) return;\n\n    const res = new Response(event.data); // 根据接收信息生成一个响应对象\n    task.res = res;\n    if (res.error) {\n      task.reject(res);\n    } else {\n      task.resolve(res);\n    }\n  }\n\n  /**\n   * 请求重试\n   * @param {Request} req 请求体\n   * @param {number} timeout 超时时间\n   * @param {number} count 重试次数\n   * @param {number} interval 重试间隔\n   * @return {Promise}  响应结果\n   */\n  private async _requestRetry(\n    req: Request,\n    timeout = 1000,\n    count = 3,\n    interval = 500\n  ) {\n    for (let i = 0; i < count; i++) {\n      // 设置延迟间隔时间\n      const time = i * interval;\n      if (time > 0) await delay(time);\n\n      try {\n        return await this._request(req, timeout);\n      } catch (err) {\n        // 重试完毕后取最后一次错误信息\n        if (i === count - 1) {\n          const { type, _id } = req;\n          return Promise.reject(\n            new Response({\n              type,\n              id: _id,\n              data: err,\n              error: true,\n            })\n          );\n        }\n      }\n    }\n  }\n}\n"],"names":["STATE"],"mappings":"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"}